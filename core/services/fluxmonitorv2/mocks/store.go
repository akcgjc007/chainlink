// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	accounts "github.com/ethereum/go-ethereum/accounts"
	common "github.com/ethereum/go-ethereum/common"

	fluxmonitorv2 "github.com/smartcontractkit/chainlink/core/services/fluxmonitorv2"

	mock "github.com/stretchr/testify/mock"

	pipeline "github.com/smartcontractkit/chainlink/core/services/pipeline"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// DeleteFluxMonitorRoundsBackThrough provides a mock function with given fields: aggregator, roundID
func (_m *Store) DeleteFluxMonitorRoundsBackThrough(aggregator common.Address, roundID uint32) error {
	ret := _m.Called(aggregator, roundID)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, uint32) error); ok {
		r0 = rf(aggregator, roundID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOrCreateFluxMonitorRoundStats provides a mock function with given fields: aggregator, roundID
func (_m *Store) FindOrCreateFluxMonitorRoundStats(aggregator common.Address, roundID uint32) (fluxmonitorv2.FluxMonitorRoundStatsV2, error) {
	ret := _m.Called(aggregator, roundID)

	var r0 fluxmonitorv2.FluxMonitorRoundStatsV2
	if rf, ok := ret.Get(0).(func(common.Address, uint32) fluxmonitorv2.FluxMonitorRoundStatsV2); ok {
		r0 = rf(aggregator, roundID)
	} else {
		r0 = ret.Get(0).(fluxmonitorv2.FluxMonitorRoundStatsV2)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, uint32) error); ok {
		r1 = rf(aggregator, roundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPipelineRun provides a mock function with given fields: runID
func (_m *Store) FindPipelineRun(runID int64) (pipeline.Run, error) {
	ret := _m.Called(runID)

	var r0 pipeline.Run
	if rf, ok := ret.Get(0).(func(int64) pipeline.Run); ok {
		r0 = rf(runID)
	} else {
		r0 = ret.Get(0).(pipeline.Run)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyStoreAccounts provides a mock function with given fields:
func (_m *Store) KeyStoreAccounts() []accounts.Account {
	ret := _m.Called()

	var r0 []accounts.Account
	if rf, ok := ret.Get(0).(func() []accounts.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accounts.Account)
		}
	}

	return r0
}

// MostRecentFluxMonitorRoundID provides a mock function with given fields: aggregator
func (_m *Store) MostRecentFluxMonitorRoundID(aggregator common.Address) (uint32, error) {
	ret := _m.Called(aggregator)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(common.Address) uint32); ok {
		r0 = rf(aggregator)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(aggregator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordError provides a mock function with given fields: jobID, description
func (_m *Store) RecordError(jobID int32, description string) {
	_m.Called(jobID, description)
}

// UpdateFluxMonitorRoundStats provides a mock function with given fields: aggregator, roundID, runID
func (_m *Store) UpdateFluxMonitorRoundStats(aggregator common.Address, roundID uint32, runID int64) error {
	ret := _m.Called(aggregator, roundID, runID)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, uint32, int64) error); ok {
		r0 = rf(aggregator, roundID, runID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
